# Introduction

This is a NOTES file for developing on the WeAct Studio MiniSTM32F4x1
(a.k.a Black Pill) that uses a STM32F411CEU6 processor with Cortex-M4
processor.

This folder contains the following folders:

 - NOTES: This file.  WeActStudio.MiniSTM32F4x1: Folder cloning the
 - original repository, for future backup. Includes diagrams,
 - bootloader, and some other useless, buggy, half-chinese translated
 - software.

# Main board components:

 - PWR led connected directly to 3V3 rail.
 - User led connected to PC13 (C13).
 - User button connected to PA0 (A0). The button is connected as follows:
 
       PA0 --> 330 Ohm resistor --> Push btn --> Ground

   Because of this configuration, button can only work in pull-up mode.
    
 - BOOT0 button. When unpressed, BOOT0 input is 0; when pressed, it switches to 1.
 - NRST button, for resetting the board. Equivalent to put 1 in the R input.
 - Processor, with Cortex-M4 single core @ 100 MHz with 512 KB flash.

# Processor operation modes (booting the board)

The mode in which the processor boots depends on the inputs BOOT0, BOOT1:

+---------------+----------------+
| BOOT0 | BOOT1 | Operation mode |
+---------------+----------------+
|   0   |   0   | Boots normally |
+---------------+----------------+
|   0   |   1   | No idea        |
+---------------+----------------+
|   1   |   0   | DFU Mode       |
+---------------+----------------+
|   1   |   1   | No idea        |
+---------------+----------------+

When processor boots normally, it executes the program defined at
address 0x08000000. It can be either a bootloader, or directly the
user program. If a bootloader is present, usually the first 16K of
flash are left for the bootloader, and the program is burned at
address 0x08004000.

# Bootloader

The board comes with a bootloader that supposedly should be able to
allow programming through USB with Serial, even with the Arduino
IDE.

The bootloader is not open source, and the build images can be found
here [2].  The bootloader is a fork from this [5] bootloader, modified
the chinese way. The original bootloader should be able to work with
this program [6], by sending a signal through the HID interface to
open the USART port, and allow Arduino to directly program the
device. The chinese version has its own CLI for uploading programs to
the device, but the last time I tried, it segfaults everywhere, so it
is useless.

I didn't find any nice bootloader that can make quick developments
quickier, so what I'm usually doing is to just burn my application in
the place of the bootloader and run it normally, without any
bootloader in between.

# Programming the board

There are three main ways:
 - Throw ST-LINKV2 (connecting a ST-LINK device to the SW pins)
 - Through USART1 (Don't really know how)
 - Through USB (with DFU mode)

Check video [4] for + info.

## DFU Mode

DFU Mode provides a way of programming the board through a
hardware-based program that provides DFU access to the device through
USB. That program cannot be deleted anyway, so there's no risk of
bricking the processor.

The device uses DfuSe, which is a variant of DFU protocol done by
ST. It can be programmed with dfu-util regardless of that.

As mentioned above, DFU mode can be entered putting BOOT0 (pressing
the BOOT0 button) to 1 and resetting the board, once the USB device is
detected by the system, BOOT0 can be released.

**PLACING A 10K RESISTOR BETWEEN PA10 AND GND AND BETWEEN PA9 IS A
  MUST FOR PROPERLY ENTERING DFU MODE WITH USB ENABLED **. These pins
  corresponds to USART1, which is also used for programming the device
  in DFU mode, but through serial (not really know how it
  works). HOWEVER, IF THEY ARE KEPT FLOATING, ENTERING DFU MODE WITH
  USB IS NOT RELIABLE. I suppose that the board tries to read
  something from the USART1 to figure out if it should use USART or
  USB for programming, and if random noise comes from the port, it can
  make the usb to not be detected by the PC.

### Uploading program using dfu-util

For manually uploading a built ELF to the MCU follow these steps:
 - Ensure you have the dfu utils installed on your system: `sudo pacman -S dfu-utils`
 - Build and locate the ELF file.
 - Extract the contents of the ELF sections to a binary file:
     arm-none-eabi-objcopy -O binary <input elf> output.bin
 - Upload the contents with dfu-util:
     dfu-util -a 0 -s 0x08000000:leave -D output.bin

     where:
      - -a 0: specifies the Alt setting to locate the DFU section
              in which the program is going to be burnt. You may use
	      `dfu-util --list` to locate the proper value for this
	      argument. You'll likely want to take alt of the interface
	      that has the name "Internal Flash".
	      
      - -s ...: The DFuSe mode string, that specifies where the data is
                going to be burnt, and some extra options, separated by :.
		The leave option will make the MCU to jump into
		application mode after the upload. You may take a look at
		more extra mode options in dfu-util --help.

      - -D output.bin: Specifies that you're going to upload the given
                file to the MCU.


## ST-LINKV2 programming

The ST-LINKV2 protocol is a way of communicating with the MCU for
multiple purposes, including debugging and flashing.

This communication protocol requires buying an external ST-LINK
compatible device and attach it to the MCU. I have this one at home
[8], which is affordable, and more than enough for my use-case.

If you're not working with a bootloader, using ST-LINK for uploading
the program is quite useful, because it doesn't require the MCU to go
into DFU mode beforehand. You just upload the binary file directly and
that's it.

For manually pushing a program to the MCU via ST-LINKV2, follow these steps:
 - Ensure you have the ST-LINK tools installed on your system: `sudo pacman -S stlink`
 - Extract the program from the ELF file as specified above.
 - Run the following command:
     st-flash --area=main write output.bin 0x08000000
 
# Rust development

## Required libraries

- stm32f4: https://github.com/stm32-rs/stm32-rs: device-specific definitions
- cortex-m: https://crates.io/crates/cortex-m
- cortex-m-rt: Entry point for bare metal applications running in Cortex-M: https://crates.io/crates/cortex-m-rt

## Rust target

This is a Cortex-M4 processor with FPU, so thumbv7em-none-eabihf target is used.

Other interesting Rust targets for other ARM processors, for reference:

+-------------------------+--------------------------------+
|thumbv6m-none-eabi       |Cortex-M0 and Cortex-M0+        |
|thumbv7m-none-eabi       |Cortex-M3                       |
|thumbv7em-none-eabi      |Cortex-M4 and Cortex-M7 (no FPU)|
|thumbv8m.base-none-eabi  |Cortex-M23                      |
|thumbv8m.main-none-eabi  |Cortex-M33 (no FPU)             |
|thumbv8m.main-none-eabihf|Cortex-M33                      |
+-------------------------+--------------------------------+

## Uploading program through cargo

### Using DFU

There's an utility for cargo, called cargo-dfu, that allows to directly upload a
program to the MCU. Follow these steps:

 - Install cargo-dfu: cargo install cargo-dfu
 - Ensure your MCU is in DFU mode.
 - Run `cargo dfu`

### Using ST-LINKV2

probe-rs provides a cargo utility for flashing multiple kinds of MCUs,
including STM32 via ST-LINK. Follow these steps in order to do so:

 - Install probe-rs: cargo install probe-rs-tools.
   (More info about installation here [9])
 - Run the following command:
     cargo flash --chip=STM32F411CE


# Clocks at a glance

Refer to section 6.2 in STM31F411xC/E advanced manual for more information.

When the processor boots up, it is by default using as clock source
the HSI (High Speed Internal) clock, which provides a 16MHz
pulse. However, the clock source and frequency can be changed by
modifying different registers.

In general, the processor can use three different sources as clock source:
  - The HSI or High Speed Internal clock, which is a clock that runs
    at 16 MHz.  It is supposed that it is not extremely precise, so
    it could be better to use an external crystal.
    
 - The HSE (High Speed External), is an external crystal physically
   connected to the processor, that must provide a clock source
   between 4MHz and 26MHz. The BlackPill device provices a 25MHz one.
   
 - PLL (Phase-Locked loop), is a circuit that is able to generate a
   pulse with a frequency higher to the input frequency.
   Some extra explaination: https://electronics.stackexchange.com/a/514206.
   The PLL can take as a source either the HSI or the HSE.

The STM32Cube software [7] can be used for visually understanding how
clocks are connected and derived from each other.

# Links

[1] Original repo: https://github.com/WeActStudio/WeActStudio.MiniSTM32F4x1/tree/master
[2] Factory bootloader: https://github.com/WeActStudio/WeActStudio.MiniSTM32F4x1/tree/master/Soft/WeAct_HID_FW_Bootloader/Bootloader
[3] Different ways of programming the board video reference: https://www.youtube.com/watch?v=KgjYJw_80DA
[4] Purchase link (Official Aliexpress shop): https://es.aliexpress.com/item/1005005953179540.html
[5] Original STM32, Arduino-compatible bootloader (doesn't work in this board): https://github.com/Serasidis/STM32_HID_Bootloader
[6] STM32_HID_Bootloader hid-util CLI: https://github.com/Serasidis/STM32_HID_Bootloader/tree/master/cli
[7] STM32Cube config generator: https://www.st.com/en/development-tools/stm32cubemx.html
[8] WeAct Mini debugger for STM32: https://es.aliexpress.com/item/1005005303809188.html
[9] probe-rs install guide: https://probe.rs/docs/getting-started/installation/